================================================================================
class type
================================================================================

FOO: String

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (class_type
          (class_name
            (constant)))))))

================================================================================
namespaced class type
================================================================================

FOO: Foo::Bar::Baz

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (class_type
          (class_name
            (namespace
              (namespace
                (constant))
              (constant))
            (constant)))))))

================================================================================
singleton class type
================================================================================

FOO: singleton(String)

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (singleton_type
          (class_name
            (constant)))))))

================================================================================
class type with type variable
================================================================================

FOO: Array[T]

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (class_type
          (class_name
            (constant))
          (type_arguments
            (type
              (class_type
                (class_name
                  (constant))))))))))

================================================================================
integer literal type
================================================================================

BAR: 123

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (integer_literal)))))

================================================================================
integer literal type with underscore
================================================================================

BAR: 1_2_3

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (integer_literal)))))

================================================================================
symbol literal type (simple)
================================================================================

BAR: :symbol

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (symbol_literal)))))

================================================================================
symbol literal type with double-quote
================================================================================

BAR: :"symbo\nl"

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (symbol_literal
          (double_quote_string_body)
          (escape_sequence)
          (double_quote_string_body))))))

================================================================================
symbol literal type with single-quote
================================================================================

BAR: :'symbo\nl'

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (symbol_literal
          (single_quote_string_body)
          (escape_sequence)
          (single_quote_string_body))))))

================================================================================
symbol literal type (operator)
================================================================================

BAR: :+

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (symbol_literal)))))

================================================================================
symbol literal type (?suffix)
================================================================================

BAR: :symbol?

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (symbol_literal)))))

================================================================================
symbol literal type (const)
================================================================================

BAR: :CONST

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (symbol_literal)))))

================================================================================
symbol literal type (const ?suffix)
================================================================================

BAR: :CONST?

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (symbol_literal)))))

================================================================================
symbol literal type (setter)
================================================================================

BAR: :foo=

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (symbol_literal)))))

================================================================================
string literal type with double-quote and escape-sequence
================================================================================

FOO: "str\ting\u1234"

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (string_literal
          (double_quote_string_body)
          (escape_sequence)
          (double_quote_string_body)
          (escape_sequence))))))

================================================================================
string literal type with single-quote
================================================================================

FOO: 'string'

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (string_literal
          (single_quote_string_body))))))

================================================================================
string literal type with single-quote and escape-sequence
================================================================================

FOO: 'str\ting\u1234'

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (string_literal
          (single_quote_string_body)
          (escape_sequence)
          (single_quote_string_body)
          (escape_sequence))))))

================================================================================
record type
================================================================================

FOO: {foo: String, bar: Integer}

--------------------------------------------------------------------------------

(program
 (decl
  (const_decl
   (const_name
    (constant))
   (type
    (record_type
     (record_key)
     (type
      (class_type
       (class_name
        (constant))))
     (record_key)
     (type
      (class_type
       (class_name
        (constant)))))))))

================================================================================
record type (optional field)
================================================================================

FOO: {foo: String, ?bar: Integer}

--------------------------------------------------------------------------------

(program
 (decl
  (const_decl
   (const_name
    (constant))
   (type
    (record_type
     (record_key)
     (type
      (class_type
       (class_name
        (constant))))
     (record_key)
     (type
      (class_type
       (class_name
        (constant)))))))))

================================================================================
Proc type
================================================================================

FOO: ^(String) -> Integer

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (proc
          (parameters
            (required_positionals
              (parameter
                (type
                  (class_type
                    (class_name
                      (constant)))))))
          (type
            (class_type
              (class_name
                (constant)))))))))

================================================================================
Proc (no args) type
================================================================================

FOO: ^() -> Integer

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (proc
          (parameters)
          (type
            (class_type
              (class_name
                (constant)))))))))

================================================================================
Proc type with self binding
================================================================================

FOO: ^() [self: String] -> Integer

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (proc
          (parameters)
          (self_type_binding
            (self)
            (type
              (class_type
                (class_name
                  (constant)))))
          (type
            (class_type
              (class_name
                (constant)))))))))

================================================================================
Proc type with block
================================================================================

FOO: ^() {(String) -> Integer} -> Integer

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (proc
          (parameters)
          (block
            (parameters
              (required_positionals
                (parameter
                  (type
                    (class_type
                      (class_name
                        (constant)))))))
            (type
              (class_type
                (class_name
                  (constant)))))
          (type
            (class_type
              (class_name
                (constant)))))))))

================================================================================
alias type
================================================================================

type foo = hoge

--------------------------------------------------------------------------------

(program
  (decl
    (type_alias_decl
      (alias_name
        (identifier))
      (type
        (alias_type
          (alias_name
            (identifier)))))))

================================================================================
complex union and intersection type
================================================================================

type foo = String | Integer & Float | Bar?

--------------------------------------------------------------------------------

(program
  (decl
    (type_alias_decl
      (alias_name
        (identifier))
      (type
        (union_type
          (type
            (union_type
              (type
                (class_type
                  (class_name
                    (constant))))
              (type
                (intersection_type
                  (type
                    (class_type
                      (class_name
                        (constant))))
                  (type
                    (class_type
                      (class_name
                        (constant))))))))
          (type
            (optional_type
              (type
                (class_type
                  (class_name
                    (constant)))))))))))

================================================================================
builtin type
================================================================================

type foo1 = bool

--------------------------------------------------------------------------------

(program
  (decl
    (type_alias_decl
      (alias_name
        (identifier))
      (type
        (builtin_type)))))

================================================================================
alias type that includes builtin type name
================================================================================

type foo1 = boolean

--------------------------------------------------------------------------------

(program
  (decl
    (type_alias_decl
      (alias_name
        (identifier))
      (type
        (alias_type
          (alias_name
            (identifier)))))))

================================================================================
type definition with parentheses
================================================================================

FOO: (String | Integer) & Float

--------------------------------------------------------------------------------

(program
  (decl
    (const_decl
      (const_name
        (constant))
      (type
        (intersection_type
          (type
            (union_type
              (type
                (class_type
                  (class_name
                    (constant))))
              (type
                (class_type
                  (class_name
                    (constant))))))
          (type
            (class_type
              (class_name
                (constant)))))))))
