==================
class
==================

class Foo
end

---

(program
 (class_decl
  (class_name
   (constant))))

==================
class with superclass
==================

class Foo < Bar
end

---

(program
 (class_decl
  (class_name
   (constant))
  (superclass
   (class_name
    (constant)))))

==================
class with type param
==================

class Foo[A]
end

---

(program
 (class_decl
  (class_name
   (constant))
  (module_type_parameters
   (module_type_parameter
    (type_variable
     (constant))))))

==================
class with multiple type params
==================

class Foo[A, B]
end

---

(program
 (class_decl
  (class_name
   (constant))
  (module_type_parameters
   (module_type_parameter
    (type_variable
     (constant)))
   (module_type_parameter
    (type_variable
     (constant))))))

==================
module
==================

module Foo
end

---

(program
 (module_decl
  (module_name
   (constant))))


==================
module with self type
==================

module Foo : Bar
end

---

(program
 (module_decl
  (module_name
   (constant))
  (module_self_type_binds
   (module_self_types
    (class_name
     (constant))))))

==================
module with multiple self types
==================

module Foo : Bar, Baz
end

---

(program
 (module_decl
  (module_name
   (constant))
  (module_self_type_binds
   (module_self_types
    (class_name
     (constant))
    (module_self_types
     (class_name
      (constant)))))))

==================
class alias
==================

class A = B

---

(program
 (class_alias_decl
  (class_name
   (constant))
  (class_name
   (constant))))

==================
module alias
==================

module A = B

---

(program
 (module_alias_decl
  (module_name
   (constant))
  (module_name
   (constant))))

==================
interface
==================

interface _Foo
end

---

(program
 (interface_decl
  (interface_name
   (interface))))


==================
type alias
==================

type foo = String

---

(program
 (type_alias_decl
  (alias_name
   (variable))
  (type
   (class_type
    (class_name
     (constant))))))


==================
constant
==================

Foo: String

---

(program
 (const_decl
  (const_name
   (constant))
  (type
   (class_type
    (class_name
     (constant))))))


==================
constant with namespace
==================

Foo::Bar: String

---

(program
 (const_decl
  (const_name
   (namespace
    (constant))
   (constant))
  (type
   (class_type
    (class_name
     (constant))))))

==================
global
==================

$global: String

---

(program
 (global_decl
  (global_name)
  (type
   (class_type
    (class_name
     (constant))))))


==================
nested declaration
==================

module Foo
  CONST: String
  class Bar
    class ID = Integer 
    module En = Enumerable 
    type a = String 
    class Baz
      def hello: () -> String
    end
  end
end

---

(program
 (module_decl
  (module_name
   (constant))
  (members
   (const_decl
    (const_name
     (constant))
    (type
     (class_type
      (class_name
       (constant)))))
   (class_decl
    (class_name
     (constant))
    (members
     (class_alias_decl
      (class_name
       (constant))
      (class_name
       (constant)))
     (module_alias_decl
      (module_name
       (constant))
      (module_name
       (constant)))
     (type_alias_decl
      (alias_name
       (variable))
      (type
       (class_type
        (class_name
         (constant)))))
     (class_decl
      (class_name
       (constant))
      (members
       (member
        (method_member
         (method_name
          (identifier))
         (method_types
          (method_type
           (parameters)
           (type
            (class_type
             (class_name
              (constant)))))))))))))))
